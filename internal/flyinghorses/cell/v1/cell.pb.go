// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: flyinghorses/cell/v1/cell.proto

package cellv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellLabel int32

const (
	CellLabel_CELL_LABEL_UNSPECIFIED CellLabel = 0
	CellLabel_CELL_LABEL_UNKNOWN     CellLabel = 1
	CellLabel_CELL_LABEL_LEGITIMATE  CellLabel = 2
	CellLabel_CELL_LABEL_SMALL_CELL  CellLabel = 3
	CellLabel_CELL_LABEL_SUSPICIOUS  CellLabel = 4
	CellLabel_CELL_LABEL_CSS         CellLabel = 5
)

// Enum value maps for CellLabel.
var (
	CellLabel_name = map[int32]string{
		0: "CELL_LABEL_UNSPECIFIED",
		1: "CELL_LABEL_UNKNOWN",
		2: "CELL_LABEL_LEGITIMATE",
		3: "CELL_LABEL_SMALL_CELL",
		4: "CELL_LABEL_SUSPICIOUS",
		5: "CELL_LABEL_CSS",
	}
	CellLabel_value = map[string]int32{
		"CELL_LABEL_UNSPECIFIED": 0,
		"CELL_LABEL_UNKNOWN":     1,
		"CELL_LABEL_LEGITIMATE":  2,
		"CELL_LABEL_SMALL_CELL":  3,
		"CELL_LABEL_SUSPICIOUS":  4,
		"CELL_LABEL_CSS":         5,
	}
)

func (x CellLabel) Enum() *CellLabel {
	p := new(CellLabel)
	*p = x
	return p
}

func (x CellLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_flyinghorses_cell_v1_cell_proto_enumTypes[0].Descriptor()
}

func (CellLabel) Type() protoreflect.EnumType {
	return &file_flyinghorses_cell_v1_cell_proto_enumTypes[0]
}

func (x CellLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellLabel.Descriptor instead.
func (CellLabel) EnumDescriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{0}
}

type CellSource int32

const (
	CellSource_CELL_SOURCE_UNSPECIFIED CellSource = 0
	CellSource_CELL_SOURCE_UNKNOWN     CellSource = 1
	CellSource_CELL_SOURCE_WIGGLE      CellSource = 2
	CellSource_CELL_SOURCE_OPENCELLID  CellSource = 3
)

// Enum value maps for CellSource.
var (
	CellSource_name = map[int32]string{
		0: "CELL_SOURCE_UNSPECIFIED",
		1: "CELL_SOURCE_UNKNOWN",
		2: "CELL_SOURCE_WIGGLE",
		3: "CELL_SOURCE_OPENCELLID",
	}
	CellSource_value = map[string]int32{
		"CELL_SOURCE_UNSPECIFIED": 0,
		"CELL_SOURCE_UNKNOWN":     1,
		"CELL_SOURCE_WIGGLE":      2,
		"CELL_SOURCE_OPENCELLID":  3,
	}
)

func (x CellSource) Enum() *CellSource {
	p := new(CellSource)
	*p = x
	return p
}

func (x CellSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellSource) Descriptor() protoreflect.EnumDescriptor {
	return file_flyinghorses_cell_v1_cell_proto_enumTypes[1].Descriptor()
}

func (CellSource) Type() protoreflect.EnumType {
	return &file_flyinghorses_cell_v1_cell_proto_enumTypes[1]
}

func (x CellSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellSource.Descriptor instead.
func (CellSource) EnumDescriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{1}
}

// 202,10,40700,2617101,164,3350,-52.9655,2680,10223,13,-0.383168,-14.5692,-5.42715,-18.314,8.50311,48b8183c972c9c7ed16210001ea81c543f22aa91d48719adf145,1661453161
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc            int64      `protobuf:"varint,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc            int64      `protobuf:"varint,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	Tac            int64      `protobuf:"varint,3,opt,name=tac,proto3" json:"tac,omitempty"`
	Cid            int64      `protobuf:"varint,4,opt,name=cid,proto3" json:"cid,omitempty"`
	Phyid          int64      `protobuf:"varint,5,opt,name=phyid,proto3" json:"phyid,omitempty"`
	Earfcn         int64      `protobuf:"varint,6,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	Rssi           float64    `protobuf:"fixed64,7,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Frequency      float64    `protobuf:"fixed64,8,opt,name=frequency,proto3" json:"frequency,omitempty"`
	EnodebId       int64      `protobuf:"varint,9,opt,name=enodeb_id,json=enodebId,proto3" json:"enodeb_id,omitempty"`
	SectorId       int64      `protobuf:"varint,10,opt,name=sector_id,json=sectorId,proto3" json:"sector_id,omitempty"`
	Cfo            float64    `protobuf:"fixed64,11,opt,name=cfo,proto3" json:"cfo,omitempty"`
	Rsrq           float64    `protobuf:"fixed64,12,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
	Snr            float64    `protobuf:"fixed64,13,opt,name=snr,proto3" json:"snr,omitempty"`
	Rsrp           float64    `protobuf:"fixed64,14,opt,name=rsrp,proto3" json:"rsrp,omitempty"`
	TxPwr          float64    `protobuf:"fixed64,15,opt,name=tx_pwr,json=txPwr,proto3" json:"tx_pwr,omitempty"`
	EstDist        float64    `protobuf:"fixed64,16,opt,name=est_dist,json=estDist,proto3" json:"est_dist,omitempty"`
	RawSib1        string     `protobuf:"bytes,17,opt,name=raw_sib1,json=rawSib1,proto3" json:"raw_sib1,omitempty"`
	Timestamp      int64      `protobuf:"varint,18,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Id             string     `protobuf:"bytes,19,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt      string     `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Lat            float64    `protobuf:"fixed64,21,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon            float64    `protobuf:"fixed64,22,opt,name=lon,proto3" json:"lon,omitempty"`
	Suspiciousness int64      `protobuf:"varint,23,opt,name=suspiciousness,proto3" json:"suspiciousness,omitempty"`
	Classification CellLabel  `protobuf:"varint,24,opt,name=classification,proto3,enum=flyinghorses.cell.v1.CellLabel" json:"classification,omitempty"`
	Source         CellSource `protobuf:"varint,25,opt,name=source,proto3,enum=flyinghorses.cell.v1.CellSource" json:"source,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{0}
}

func (x *Cell) GetMcc() int64 {
	if x != nil {
		return x.Mcc
	}
	return 0
}

func (x *Cell) GetMnc() int64 {
	if x != nil {
		return x.Mnc
	}
	return 0
}

func (x *Cell) GetTac() int64 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *Cell) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *Cell) GetPhyid() int64 {
	if x != nil {
		return x.Phyid
	}
	return 0
}

func (x *Cell) GetEarfcn() int64 {
	if x != nil {
		return x.Earfcn
	}
	return 0
}

func (x *Cell) GetRssi() float64 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *Cell) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Cell) GetEnodebId() int64 {
	if x != nil {
		return x.EnodebId
	}
	return 0
}

func (x *Cell) GetSectorId() int64 {
	if x != nil {
		return x.SectorId
	}
	return 0
}

func (x *Cell) GetCfo() float64 {
	if x != nil {
		return x.Cfo
	}
	return 0
}

func (x *Cell) GetRsrq() float64 {
	if x != nil {
		return x.Rsrq
	}
	return 0
}

func (x *Cell) GetSnr() float64 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *Cell) GetRsrp() float64 {
	if x != nil {
		return x.Rsrp
	}
	return 0
}

func (x *Cell) GetTxPwr() float64 {
	if x != nil {
		return x.TxPwr
	}
	return 0
}

func (x *Cell) GetEstDist() float64 {
	if x != nil {
		return x.EstDist
	}
	return 0
}

func (x *Cell) GetRawSib1() string {
	if x != nil {
		return x.RawSib1
	}
	return ""
}

func (x *Cell) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Cell) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cell) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Cell) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Cell) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Cell) GetSuspiciousness() int64 {
	if x != nil {
		return x.Suspiciousness
	}
	return 0
}

func (x *Cell) GetClassification() CellLabel {
	if x != nil {
		return x.Classification
	}
	return CellLabel_CELL_LABEL_UNSPECIFIED
}

func (x *Cell) GetSource() CellSource {
	if x != nil {
		return x.Source
	}
	return CellSource_CELL_SOURCE_UNSPECIFIED
}

type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{1}
}

type StreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Cell `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{2}
}

func (x *StreamResponse) GetData() *Cell {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_flyinghorses_cell_v1_cell_proto protoreflect.FileDescriptor

var file_flyinghorses_cell_v1_cell_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x63,
	0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x22, 0x9d, 0x05, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d,
	0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x79, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x68, 0x79, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x6f, 0x64,
	0x65, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x6e, 0x6f,
	0x64, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x63, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73,
	0x72, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x72, 0x70, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x78, 0x5f, 0x70, 0x77, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x74, 0x78, 0x50, 0x77, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x62, 0x31, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x69, 0x62, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x66,
	0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0e, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xa4, 0x01, 0x0a, 0x09, 0x43,
	0x65, 0x6c, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4c, 0x45, 0x47, 0x49, 0x54,
	0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x5f, 0x53, 0x55, 0x53, 0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x43, 0x53, 0x53, 0x10,
	0x05, 0x2a, 0x76, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x47, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x32, 0x66, 0x0a, 0x0b, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x73, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x42, 0xdf, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x09,
	0x43, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x2f, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x65, 0x6c,
	0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x43, 0x58, 0xaa, 0x02, 0x14, 0x46, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x14, 0x46, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x5c,
	0x43, 0x65, 0x6c, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x46, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x5c, 0x43, 0x65, 0x6c, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x46, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x3a, 0x3a, 0x43, 0x65, 0x6c, 0x6c, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyinghorses_cell_v1_cell_proto_rawDescOnce sync.Once
	file_flyinghorses_cell_v1_cell_proto_rawDescData = file_flyinghorses_cell_v1_cell_proto_rawDesc
)

func file_flyinghorses_cell_v1_cell_proto_rawDescGZIP() []byte {
	file_flyinghorses_cell_v1_cell_proto_rawDescOnce.Do(func() {
		file_flyinghorses_cell_v1_cell_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyinghorses_cell_v1_cell_proto_rawDescData)
	})
	return file_flyinghorses_cell_v1_cell_proto_rawDescData
}

var file_flyinghorses_cell_v1_cell_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flyinghorses_cell_v1_cell_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_flyinghorses_cell_v1_cell_proto_goTypes = []interface{}{
	(CellLabel)(0),         // 0: flyinghorses.cell.v1.CellLabel
	(CellSource)(0),        // 1: flyinghorses.cell.v1.CellSource
	(*Cell)(nil),           // 2: flyinghorses.cell.v1.Cell
	(*StreamRequest)(nil),  // 3: flyinghorses.cell.v1.StreamRequest
	(*StreamResponse)(nil), // 4: flyinghorses.cell.v1.StreamResponse
}
var file_flyinghorses_cell_v1_cell_proto_depIdxs = []int32{
	0, // 0: flyinghorses.cell.v1.Cell.classification:type_name -> flyinghorses.cell.v1.CellLabel
	1, // 1: flyinghorses.cell.v1.Cell.source:type_name -> flyinghorses.cell.v1.CellSource
	2, // 2: flyinghorses.cell.v1.StreamResponse.data:type_name -> flyinghorses.cell.v1.Cell
	3, // 3: flyinghorses.cell.v1.CellService.Stream:input_type -> flyinghorses.cell.v1.StreamRequest
	4, // 4: flyinghorses.cell.v1.CellService.Stream:output_type -> flyinghorses.cell.v1.StreamResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_flyinghorses_cell_v1_cell_proto_init() }
func file_flyinghorses_cell_v1_cell_proto_init() {
	if File_flyinghorses_cell_v1_cell_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyinghorses_cell_v1_cell_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyinghorses_cell_v1_cell_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyinghorses_cell_v1_cell_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyinghorses_cell_v1_cell_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flyinghorses_cell_v1_cell_proto_goTypes,
		DependencyIndexes: file_flyinghorses_cell_v1_cell_proto_depIdxs,
		EnumInfos:         file_flyinghorses_cell_v1_cell_proto_enumTypes,
		MessageInfos:      file_flyinghorses_cell_v1_cell_proto_msgTypes,
	}.Build()
	File_flyinghorses_cell_v1_cell_proto = out.File
	file_flyinghorses_cell_v1_cell_proto_rawDesc = nil
	file_flyinghorses_cell_v1_cell_proto_goTypes = nil
	file_flyinghorses_cell_v1_cell_proto_depIdxs = nil
}
