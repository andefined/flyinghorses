// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: flyinghorses/cell/v1/cell.proto

package cellv1

import (
	v1 "github.com/andefined/flyinghorses/internal/flyinghorses/commons/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellLabel int32

const (
	CellLabel_CELL_LABEL_UNSPECIFIED CellLabel = 0
	CellLabel_CELL_LABEL_UNKNOWN     CellLabel = 1
	CellLabel_CELL_LABEL_LEGITIMATE  CellLabel = 2
	CellLabel_CELL_LABEL_SMALL_CELL  CellLabel = 3
	CellLabel_CELL_LABEL_SUSPICIOUS  CellLabel = 4
	CellLabel_CELL_LABEL_CSS         CellLabel = 5
)

// Enum value maps for CellLabel.
var (
	CellLabel_name = map[int32]string{
		0: "CELL_LABEL_UNSPECIFIED",
		1: "CELL_LABEL_UNKNOWN",
		2: "CELL_LABEL_LEGITIMATE",
		3: "CELL_LABEL_SMALL_CELL",
		4: "CELL_LABEL_SUSPICIOUS",
		5: "CELL_LABEL_CSS",
	}
	CellLabel_value = map[string]int32{
		"CELL_LABEL_UNSPECIFIED": 0,
		"CELL_LABEL_UNKNOWN":     1,
		"CELL_LABEL_LEGITIMATE":  2,
		"CELL_LABEL_SMALL_CELL":  3,
		"CELL_LABEL_SUSPICIOUS":  4,
		"CELL_LABEL_CSS":         5,
	}
)

func (x CellLabel) Enum() *CellLabel {
	p := new(CellLabel)
	*p = x
	return p
}

func (x CellLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_flyinghorses_cell_v1_cell_proto_enumTypes[0].Descriptor()
}

func (CellLabel) Type() protoreflect.EnumType {
	return &file_flyinghorses_cell_v1_cell_proto_enumTypes[0]
}

func (x CellLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellLabel.Descriptor instead.
func (CellLabel) EnumDescriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{0}
}

type CellSource int32

const (
	CellSource_CELL_SOURCE_UNSPECIFIED CellSource = 0
	CellSource_CELL_SOURCE_UNKNOWN     CellSource = 1
	CellSource_CELL_SOURCE_WIGGLE      CellSource = 2
	CellSource_CELL_SOURCE_OPENCELLID  CellSource = 3
)

// Enum value maps for CellSource.
var (
	CellSource_name = map[int32]string{
		0: "CELL_SOURCE_UNSPECIFIED",
		1: "CELL_SOURCE_UNKNOWN",
		2: "CELL_SOURCE_WIGGLE",
		3: "CELL_SOURCE_OPENCELLID",
	}
	CellSource_value = map[string]int32{
		"CELL_SOURCE_UNSPECIFIED": 0,
		"CELL_SOURCE_UNKNOWN":     1,
		"CELL_SOURCE_WIGGLE":      2,
		"CELL_SOURCE_OPENCELLID":  3,
	}
)

func (x CellSource) Enum() *CellSource {
	p := new(CellSource)
	*p = x
	return p
}

func (x CellSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellSource) Descriptor() protoreflect.EnumDescriptor {
	return file_flyinghorses_cell_v1_cell_proto_enumTypes[1].Descriptor()
}

func (CellSource) Type() protoreflect.EnumType {
	return &file_flyinghorses_cell_v1_cell_proto_enumTypes[1]
}

func (x CellSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellSource.Descriptor instead.
func (CellSource) EnumDescriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{1}
}

type CellLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Approximate Latitude obtained via GPSD
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	// Approximate Longitude obtained via GPSD
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *CellLocation) Reset() {
	*x = CellLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellLocation) ProtoMessage() {}

func (x *CellLocation) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellLocation.ProtoReflect.Descriptor instead.
func (*CellLocation) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{0}
}

func (x *CellLocation) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *CellLocation) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type CellMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Notes       string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	Operator    string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (x *CellMeta) Reset() {
	*x = CellMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMeta) ProtoMessage() {}

func (x *CellMeta) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMeta.ProtoReflect.Descriptor instead.
func (*CellMeta) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{1}
}

func (x *CellMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CellMeta) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CellMeta) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CellMeta) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mobile Country Code
	Mcc int64 `protobuf:"varint,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	// Mobile Network Code
	Mnc int64 `protobuf:"varint,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	// Tracking Area Code
	Tac int64 `protobuf:"varint,3,opt,name=tac,proto3" json:"tac,omitempty"`
	// Cell ID
	Cid int64 `protobuf:"varint,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// PHY-layer Cell ID
	Phyid int64 `protobuf:"varint,5,opt,name=phyid,proto3" json:"phyid,omitempty"`
	// E-UTRA Absolute Radio Frequency Channel
	Earfcn int64 `protobuf:"varint,6,opt,name=earfcn,proto3" json:"earfcn,omitempty"`
	// Received Signal Strength Indicator
	Rssi float64 `protobuf:"fixed64,7,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// Transmitting Frequency
	Frequency float64 `protobuf:"fixed64,8,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Enodeb ID
	EnodebId int64 `protobuf:"varint,9,opt,name=enodeb_id,json=enodebId,proto3" json:"enodeb_id,omitempty"`
	// Sector ID
	SectorId int64 `protobuf:"varint,10,opt,name=sector_id,json=sectorId,proto3" json:"sector_id,omitempty"`
	// Carrier Frequency Offset
	Cfo float64 `protobuf:"fixed64,11,opt,name=cfo,proto3" json:"cfo,omitempty"`
	// Reference Signal Received Quality (N*(RSRP/RSSI))
	Rsrq float64 `protobuf:"fixed64,12,opt,name=rsrq,proto3" json:"rsrq,omitempty"`
	// Signal Noise Ratio
	Snr float64 `protobuf:"fixed64,13,opt,name=snr,proto3" json:"snr,omitempty"`
	// Reference Signal Received Power
	Rsrp float64 `protobuf:"fixed64,14,opt,name=rsrp,proto3" json:"rsrp,omitempty"`
	// Transmitting Power
	TxPwr float64 `protobuf:"fixed64,15,opt,name=tx_pwr,json=txPwr,proto3" json:"tx_pwr,omitempty"`
	// Estimated Distance
	EstDist float64 `protobuf:"fixed64,16,opt,name=est_dist,json=estDist,proto3" json:"est_dist,omitempty"`
	// Raw Cell Access Related Information
	RawSib1 string `protobuf:"bytes,17,opt,name=raw_sib1,json=rawSib1,proto3" json:"raw_sib1,omitempty"`
	// Timestamp
	Timestamp int64 `protobuf:"varint,18,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Cell ID
	Id string `protobuf:"bytes,19,opt,name=id,proto3" json:"id,omitempty"`
	// Cell Created at Datetim
	CreatedAt string `protobuf:"bytes,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Cell Suspiciousness (0-100)
	Suspiciousness int64 `protobuf:"varint,21,opt,name=suspiciousness,proto3" json:"suspiciousness,omitempty"`
	// Cell Location
	Location *CellLocation `protobuf:"bytes,22,opt,name=location,proto3" json:"location,omitempty"`
	// Cell Classified Label
	Classification CellLabel `protobuf:"varint,23,opt,name=classification,proto3,enum=c.cell.v1.CellLabel" json:"classification,omitempty"`
	// Cell Source
	Source CellSource `protobuf:"varint,24,opt,name=source,proto3,enum=c.cell.v1.CellSource" json:"source,omitempty"`
	// Cell Meta
	Meta *CellMeta `protobuf:"bytes,25,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{2}
}

func (x *Cell) GetMcc() int64 {
	if x != nil {
		return x.Mcc
	}
	return 0
}

func (x *Cell) GetMnc() int64 {
	if x != nil {
		return x.Mnc
	}
	return 0
}

func (x *Cell) GetTac() int64 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *Cell) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *Cell) GetPhyid() int64 {
	if x != nil {
		return x.Phyid
	}
	return 0
}

func (x *Cell) GetEarfcn() int64 {
	if x != nil {
		return x.Earfcn
	}
	return 0
}

func (x *Cell) GetRssi() float64 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *Cell) GetFrequency() float64 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *Cell) GetEnodebId() int64 {
	if x != nil {
		return x.EnodebId
	}
	return 0
}

func (x *Cell) GetSectorId() int64 {
	if x != nil {
		return x.SectorId
	}
	return 0
}

func (x *Cell) GetCfo() float64 {
	if x != nil {
		return x.Cfo
	}
	return 0
}

func (x *Cell) GetRsrq() float64 {
	if x != nil {
		return x.Rsrq
	}
	return 0
}

func (x *Cell) GetSnr() float64 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *Cell) GetRsrp() float64 {
	if x != nil {
		return x.Rsrp
	}
	return 0
}

func (x *Cell) GetTxPwr() float64 {
	if x != nil {
		return x.TxPwr
	}
	return 0
}

func (x *Cell) GetEstDist() float64 {
	if x != nil {
		return x.EstDist
	}
	return 0
}

func (x *Cell) GetRawSib1() string {
	if x != nil {
		return x.RawSib1
	}
	return ""
}

func (x *Cell) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Cell) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cell) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Cell) GetSuspiciousness() int64 {
	if x != nil {
		return x.Suspiciousness
	}
	return 0
}

func (x *Cell) GetLocation() *CellLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Cell) GetClassification() CellLabel {
	if x != nil {
		return x.Classification
	}
	return CellLabel_CELL_LABEL_UNSPECIFIED
}

func (x *Cell) GetSource() CellSource {
	if x != nil {
		return x.Source
	}
	return CellSource_CELL_SOURCE_UNSPECIFIED
}

func (x *Cell) GetMeta() *CellMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type CellQueryParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell  *Cell `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int64 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *CellQueryParams) Reset() {
	*x = CellQueryParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellQueryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellQueryParams) ProtoMessage() {}

func (x *CellQueryParams) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellQueryParams.ProtoReflect.Descriptor instead.
func (*CellQueryParams) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{3}
}

func (x *CellQueryParams) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *CellQueryParams) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CellQueryParams) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type CellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*Cell        `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *v1.Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *CellList) Reset() {
	*x = CellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellList) ProtoMessage() {}

func (x *CellList) ProtoReflect() protoreflect.Message {
	mi := &file_flyinghorses_cell_v1_cell_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellList.ProtoReflect.Descriptor instead.
func (*CellList) Descriptor() ([]byte, []int) {
	return file_flyinghorses_cell_v1_cell_proto_rawDescGZIP(), []int{4}
}

func (x *CellList) GetData() []*Cell {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CellList) GetPagination() *v1.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

var File_flyinghorses_cell_v1_cell_proto protoreflect.FileDescriptor

var file_flyinghorses_cell_v1_cell_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x63,
	0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x66, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x32, 0x0a, 0x0c, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xc1, 0x05, 0x0a, 0x04, 0x43,
	0x65, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x79, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x68, 0x79, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x65, 0x61, 0x72, 0x66, 0x63, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73,
	0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x6f, 0x64, 0x65, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x65, 0x6e, 0x6f, 0x64, 0x65, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x63, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x6e, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x72,
	0x70, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x70, 0x77, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x74, 0x78, 0x50, 0x77, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x69, 0x62, 0x31, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x53, 0x69, 0x62, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x69, 0x63, 0x69, 0x6f, 0x75, 0x73, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x60,
	0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x74, 0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x2e, 0x63,
	0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xa4, 0x01, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4c, 0x45, 0x47, 0x49, 0x54, 0x49, 0x4d, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x53, 0x55, 0x53,
	0x50, 0x49, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x43, 0x53, 0x53, 0x10, 0x05, 0x2a, 0x76, 0x0a,
	0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x57, 0x49, 0x47, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x49, 0x44, 0x10, 0x03, 0x32, 0x8e, 0x03, 0x0a, 0x0b, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1a, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x63, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x45, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x2e, 0x63,
	0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x1a, 0x28, 0x2e, 0x66, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0f, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1a, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x0f, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x63,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x13, 0x2e, 0x63, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x45, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x1a, 0x28, 0x2e, 0x66, 0x6c, 0x79,
	0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xab, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x66, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x66, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x63,
	0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x65, 0x6c, 0x6c, 0x76, 0x31, 0xf8, 0x01, 0x00,
	0xa2, 0x02, 0x03, 0x43, 0x43, 0x58, 0xaa, 0x02, 0x09, 0x43, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x09, 0x43, 0x5c, 0x43, 0x65, 0x6c, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x15, 0x43, 0x5c, 0x43, 0x65, 0x6c, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x3a, 0x3a, 0x43, 0x65, 0x6c, 0x6c,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flyinghorses_cell_v1_cell_proto_rawDescOnce sync.Once
	file_flyinghorses_cell_v1_cell_proto_rawDescData = file_flyinghorses_cell_v1_cell_proto_rawDesc
)

func file_flyinghorses_cell_v1_cell_proto_rawDescGZIP() []byte {
	file_flyinghorses_cell_v1_cell_proto_rawDescOnce.Do(func() {
		file_flyinghorses_cell_v1_cell_proto_rawDescData = protoimpl.X.CompressGZIP(file_flyinghorses_cell_v1_cell_proto_rawDescData)
	})
	return file_flyinghorses_cell_v1_cell_proto_rawDescData
}

var file_flyinghorses_cell_v1_cell_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_flyinghorses_cell_v1_cell_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_flyinghorses_cell_v1_cell_proto_goTypes = []interface{}{
	(CellLabel)(0),             // 0: c.cell.v1.CellLabel
	(CellSource)(0),            // 1: c.cell.v1.CellSource
	(*CellLocation)(nil),       // 2: c.cell.v1.CellLocation
	(*CellMeta)(nil),           // 3: c.cell.v1.CellMeta
	(*Cell)(nil),               // 4: c.cell.v1.Cell
	(*CellQueryParams)(nil),    // 5: c.cell.v1.CellQueryParams
	(*CellList)(nil),           // 6: c.cell.v1.CellList
	(*v1.Pagination)(nil),      // 7: flyinghorses.commons.v1.Pagination
	(*v1.GenericResponse)(nil), // 8: flyinghorses.commons.v1.GenericResponse
}
var file_flyinghorses_cell_v1_cell_proto_depIdxs = []int32{
	2,  // 0: c.cell.v1.Cell.location:type_name -> c.cell.v1.CellLocation
	0,  // 1: c.cell.v1.Cell.classification:type_name -> c.cell.v1.CellLabel
	1,  // 2: c.cell.v1.Cell.source:type_name -> c.cell.v1.CellSource
	3,  // 3: c.cell.v1.Cell.meta:type_name -> c.cell.v1.CellMeta
	4,  // 4: c.cell.v1.CellQueryParams.cell:type_name -> c.cell.v1.Cell
	4,  // 5: c.cell.v1.CellList.data:type_name -> c.cell.v1.Cell
	7,  // 6: c.cell.v1.CellList.pagination:type_name -> flyinghorses.commons.v1.Pagination
	5,  // 7: c.cell.v1.CellService.Stream:input_type -> c.cell.v1.CellQueryParams
	4,  // 8: c.cell.v1.CellService.Create:input_type -> c.cell.v1.Cell
	4,  // 9: c.cell.v1.CellService.Update:input_type -> c.cell.v1.Cell
	5,  // 10: c.cell.v1.CellService.Get:input_type -> c.cell.v1.CellQueryParams
	5,  // 11: c.cell.v1.CellService.List:input_type -> c.cell.v1.CellQueryParams
	4,  // 12: c.cell.v1.CellService.Delete:input_type -> c.cell.v1.Cell
	4,  // 13: c.cell.v1.CellService.Stream:output_type -> c.cell.v1.Cell
	8,  // 14: c.cell.v1.CellService.Create:output_type -> flyinghorses.commons.v1.GenericResponse
	8,  // 15: c.cell.v1.CellService.Update:output_type -> flyinghorses.commons.v1.GenericResponse
	4,  // 16: c.cell.v1.CellService.Get:output_type -> c.cell.v1.Cell
	6,  // 17: c.cell.v1.CellService.List:output_type -> c.cell.v1.CellList
	8,  // 18: c.cell.v1.CellService.Delete:output_type -> flyinghorses.commons.v1.GenericResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_flyinghorses_cell_v1_cell_proto_init() }
func file_flyinghorses_cell_v1_cell_proto_init() {
	if File_flyinghorses_cell_v1_cell_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flyinghorses_cell_v1_cell_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyinghorses_cell_v1_cell_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyinghorses_cell_v1_cell_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyinghorses_cell_v1_cell_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellQueryParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flyinghorses_cell_v1_cell_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flyinghorses_cell_v1_cell_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flyinghorses_cell_v1_cell_proto_goTypes,
		DependencyIndexes: file_flyinghorses_cell_v1_cell_proto_depIdxs,
		EnumInfos:         file_flyinghorses_cell_v1_cell_proto_enumTypes,
		MessageInfos:      file_flyinghorses_cell_v1_cell_proto_msgTypes,
	}.Build()
	File_flyinghorses_cell_v1_cell_proto = out.File
	file_flyinghorses_cell_v1_cell_proto_rawDesc = nil
	file_flyinghorses_cell_v1_cell_proto_goTypes = nil
	file_flyinghorses_cell_v1_cell_proto_depIdxs = nil
}
